{"version":3,"sources":["types.ts","utils/idHelper.ts","algorithms/SortingAlgorithm.ts","utils/randomArray.ts","algorithms/InsertionSort.ts","algorithms/MergeSort.ts","algorithms/QuickSort.ts","algorithms/SelectionSort.ts","algorithms/index.ts","utils/assertNever.ts","utils/evaluateStep.ts","hooks/useVisualizer.tsx","components/Bar.tsx","components/Bars.tsx","components/ColorInfo.tsx","components/ControlTab.tsx","components/Header.tsx","components/App.tsx","index.tsx"],"names":["AlgorithmAction","StateColor","SortingAlgorithmDisplayName","id","SortingAlgorithm","name","numberArray","this","map","x","value","backgroundColor","Red","arrLen","arr","start","end","i","push","generateRange","length","j","Math","floor","random","randomArray","getInitialState","InsertionSort","Insertion","a","b","steps","action","Compare","operands","left","right","Swap","tmp","SetSorted","operand","Finish","MergeSort","Merge","merge","result","sorted","swapMap","MergeEnter","MergeCompare","MergeSetSorted","from","to","MergeExit","mergeSort","list","middle","ceil","leftSubArraySorted","slice","rightSubArraySorted","QuickSort","Quick","partition","lo","hi","pivot","SwapAndSetSorted","index","quicksort","p","SelectionSort","Selection","n","minIndex","SortingAlgorithmAbstract","algorithms","displayName","algorithmClass","assertNever","Error","JSON","stringify","evaluateNextStep","mainBars","ambientBars","step","prevMainBars","prevAmbientBars","appendToPrevState","current","bar","style","opacity","order","forEach","parseInt","Yellow","Green","toString","targetHeight","height","useVisualizer","algorithm","arrayLength","useState","isRunning","setIsRunning","setMainBars","setAmbientBars","useRef","stepIndex","barsRef","timeOuts","clearVisualization","timeout","clearTimeout","reset","initialBars","generateBars","useCallback","generateArray","useEffect","togglePlay","sort","delay","max","min","setTimeout","startVisualization","stepForward","stepBackward","prevMainBarsState","prevAmbientBarsState","evaluatePrevStep","Bar","React","forwardRef","ref","Bars","heightCoefficient","margin","mainBarsRef","ambientBarsRef","splice","useImperativeHandle","className","flex","marginLeft","marginRight","zIndex","el","memo","ColorInfo","Button","require","default","Slider","IconButton","PlayCircleFilledIcon","PauseCircleFilledIcon","SkipNextIcon","SkipPreviousIcon","ControlTab","setArrayLength","onClickGenerateNew","onClickPlay","onClickReset","onClickStepForward","onClickStepBackward","onClick","variant","color","onChange","_","newValue","Header","currentAlgorithmName","setAlgorithm","showDropdown","setShowDropdown","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f44a30cd.chunk.js","sourcesContent":["import MergeSort from \"./algorithms/MergeSort\";\nimport SelectionSort from \"./algorithms/SelectionSort\";\n\nexport enum AlgorithmAction {\n  Swap,\n  Compare,\n  SetSorted,\n  Finish,\n  SwapAndSetSorted,\n  MergeEnter,\n  MergeCompare,\n  MergeSetSorted,\n  MergeExit,\n}\n\nexport interface StepSwap {\n  action: AlgorithmAction.Swap;\n  operands: {\n    left: number;\n    right: number;\n  };\n}\n\nexport interface StepCompare {\n  action: AlgorithmAction.Compare;\n  operands: {\n    left: number;\n    right: number;\n  };\n}\n\nexport interface StepSetSorted {\n  action: AlgorithmAction.SetSorted;\n  operand: number;\n}\n\nexport interface StepFinish {\n  action: AlgorithmAction.Finish;\n}\n\nexport interface StepSwapAndSetSorted {\n  action: AlgorithmAction.SwapAndSetSorted;\n  operands: {\n    left: {\n      index: number;\n      sorted: boolean;\n    };\n    right: {\n      index: number;\n      sorted: boolean;\n    };\n  };\n}\n\nexport interface StepMergeCompare {\n  action: AlgorithmAction.MergeCompare;\n  operands: {\n    left: number;\n    right: number;\n  };\n}\n\nexport interface StepMergeEnter {\n  action: AlgorithmAction.MergeEnter;\n  start: number;\n  end: number;\n}\n\nexport interface StepMergeSetSorted {\n  action: AlgorithmAction.MergeSetSorted;\n  from: number;\n  to: number;\n  sorted: boolean;\n}\n\nexport interface StepMergeExit {\n  action: AlgorithmAction.MergeExit;\n  start: number;\n  end: number;\n  swapMap: {\n    [id: number]: number;\n  };\n}\n\nexport type AlgorithmStep =\n  | StepSwap\n  | StepCompare\n  | StepSetSorted\n  | StepFinish\n  | StepSwapAndSetSorted\n  | StepMergeCompare\n  | StepMergeEnter\n  | StepMergeSetSorted\n  | StepMergeExit;\n\nexport enum StateColor {\n  Red = \"red\",\n  Yellow = \"yellow\",\n  Green = \"green\",\n}\n\nexport interface UIBar {\n  value: number;\n  backgroundColor: StateColor;\n  id: number;\n}\n\nexport interface BarState {\n  backgroundColor: string;\n  order: string;\n  opacity: string;\n}\n\nexport enum SortingAlgorithmDisplayName {\n  Selection = \"Selection Sort\",\n  Merge = \"Merge Sort\",\n  Insertion = \"Insertion Sort\",\n  Quick = \"Quicksort\",\n}\n\nexport type SortingAlgorithmClass = typeof SelectionSort | typeof MergeSort;\n","let id = 0;\n\nexport const getUniqueId = () => {\n  return id++;\n};\n","import {\n  AlgorithmStep,\n  SortingAlgorithmDisplayName,\n  StateColor,\n  UIBar,\n} from \"../types\";\nimport { getUniqueId } from \"../utils/idHelper\";\nimport { randomArray } from \"../utils/randomArray\";\n\nexport const MIN_VALUE = 1;\n\nabstract class SortingAlgorithm {\n  public abstract name: SortingAlgorithmDisplayName;\n  protected numberArray: number[] = [];\n\n  public getInitialState(): UIBar[] {\n    return this.numberArray.map((x) => ({\n      value: x,\n      backgroundColor: StateColor.Red,\n      id: getUniqueId(),\n    }));\n  }\n\n  public generateArray(arrLen: number): UIBar[] {\n    const arr = randomArray(MIN_VALUE, MIN_VALUE + arrLen);\n    this.numberArray = arr;\n    return this.getInitialState();\n  }\n\n  public abstract sort(): AlgorithmStep[];\n}\n\nexport default SortingAlgorithm;\n","// Generate a range of integers [start, start+1, ... , end).\nexport const generateRange = (start: number, end: number) => {\n  const arr = [];\n  for (let i = start; i < end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n// Generate a random permutation of the range [start, start+1, ... , end).\n// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nexport const randomArray = (start: number, end: number) => {\n  const arr = generateRange(start, end);\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr;\n};\n","import {\n  AlgorithmAction,\n  AlgorithmStep,\n  SortingAlgorithmDisplayName,\n} from \"../types\";\nimport SortingAlgorithm from \"./SortingAlgorithm\";\n\nclass InsertionSort extends SortingAlgorithm {\n  public name = SortingAlgorithmDisplayName.Insertion;\n\n  public sort() {\n    const arr = [...this.numberArray];\n    const steps: AlgorithmStep[] = [];\n\n    const compare = (a: number, b: number) => {\n      steps.push({\n        action: AlgorithmAction.Compare,\n        operands: {\n          left: a,\n          right: b,\n        },\n      });\n      return arr[a] > arr[b];\n    };\n\n    let i = 1;\n    while (i < arr.length) {\n      let j = i;\n      while (j > 0 && compare(j - 1, j)) {\n        steps.push({\n          action: AlgorithmAction.Swap,\n          operands: {\n            left: j - 1,\n            right: j,\n          },\n        });\n        const tmp = arr[j - 1];\n        arr[j - 1] = arr[j];\n        arr[j] = tmp;\n        j--;\n      }\n      i++;\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n      steps.push({\n        action: AlgorithmAction.SetSorted,\n        operand: i,\n      });\n    }\n\n    steps.push({\n      action: AlgorithmAction.Finish,\n    });\n\n    return steps;\n  }\n}\n\nexport default InsertionSort;\n","import {\n  AlgorithmAction,\n  AlgorithmStep,\n  SortingAlgorithmDisplayName,\n} from \"../types\";\nimport SortingAlgorithm from \"./SortingAlgorithm\";\n\nclass MergeSort extends SortingAlgorithm {\n  public name = SortingAlgorithmDisplayName.Merge;\n\n  public sort() {\n    const arr = [...this.numberArray];\n    const steps: AlgorithmStep[] = [];\n\n    const mergeSort = (\n      list: number[],\n      start: number,\n      end: number\n    ): number[] => {\n      if (list.length <= 1) {\n        return list;\n      }\n\n      const middle = Math.ceil(list.length / 2);\n      const leftSubArraySorted = mergeSort(\n        list.slice(0, middle),\n        start,\n        start + middle\n      );\n      const rightSubArraySorted = mergeSort(\n        list.slice(middle),\n        start + middle,\n        end\n      );\n\n      return merge(leftSubArraySorted, rightSubArraySorted, start, end);\n    };\n\n    const merge = (\n      left: number[],\n      right: number[],\n      start: number,\n      end: number\n    ): number[] => {\n      const result: number[] = [];\n      const sorted = start === 0 && end === arr.length;\n      const swapMap: { [id: number]: number } = {};\n\n      steps.push({\n        action: AlgorithmAction.MergeEnter,\n        start,\n        end,\n      });\n\n      let i = 0;\n      let j = 0;\n      while (i < left.length && j < right.length) {\n        steps.push({\n          action: AlgorithmAction.MergeCompare,\n          operands: {\n            left: start + i,\n            right: start + left.length + j,\n          },\n        });\n        if (left[i] <= right[j]) {\n          steps.push({\n            action: AlgorithmAction.MergeSetSorted,\n            from: start + i,\n            to: start + i + j,\n            sorted,\n          });\n          swapMap[start + i] = start + i + j;\n          result.push(left[i]);\n          i++;\n        } else {\n          steps.push({\n            action: AlgorithmAction.MergeSetSorted,\n            from: start + left.length + j,\n            to: start + i + j,\n            sorted,\n          });\n          swapMap[start + left.length + j] = start + i + j;\n          result.push(right[j]);\n          j++;\n        }\n      }\n\n      while (i < left.length) {\n        steps.push({\n          action: AlgorithmAction.MergeSetSorted,\n          from: start + i,\n          to: start + i + j,\n          sorted,\n        });\n        swapMap[start + i] = start + i + j;\n        result.push(left[i]);\n        i++;\n      }\n      while (j < right.length) {\n        steps.push({\n          action: AlgorithmAction.MergeSetSorted,\n          from: start + left.length + j,\n          to: start + i + j,\n          sorted,\n        });\n        swapMap[start + left.length + j] = start + i + j;\n        result.push(right[j]);\n        j++;\n      }\n\n      steps.push({\n        action: AlgorithmAction.MergeExit,\n        start,\n        end,\n        swapMap,\n      });\n\n      return result;\n    };\n\n    mergeSort(arr, 0, arr.length);\n\n    steps.push({\n      action: AlgorithmAction.Finish,\n    });\n\n    return steps;\n  }\n}\n\nexport default MergeSort;\n","import {\n  AlgorithmAction,\n  AlgorithmStep,\n  SortingAlgorithmDisplayName,\n} from \"../types\";\nimport SortingAlgorithm from \"./SortingAlgorithm\";\n\nclass QuickSort extends SortingAlgorithm {\n  public name = SortingAlgorithmDisplayName.Quick;\n\n  public sort() {\n    const arr = [...this.numberArray];\n    const steps: AlgorithmStep[] = [];\n\n    const quicksort = (lo: number, hi: number) => {\n      if (lo < hi) {\n        const p = partition(lo, hi);\n        quicksort(lo, p - 1);\n        quicksort(p + 1, hi);\n      } else if (lo === hi) {\n        steps.push({\n          action: AlgorithmAction.SetSorted,\n          operand: lo,\n        });\n      }\n    };\n\n    const partition = (lo: number, hi: number) => {\n      const pivot = arr[hi];\n      let i = lo;\n      for (let j = lo; j < hi; j++) {\n        steps.push({\n          action: AlgorithmAction.Compare,\n          operands: {\n            left: j,\n            right: hi,\n          },\n        });\n        if (arr[j] < pivot) {\n          steps.push({\n            action: AlgorithmAction.Swap,\n            operands: {\n              left: i,\n              right: j,\n            },\n          });\n          const tmp = arr[i];\n          arr[i] = arr[j];\n          arr[j] = tmp;\n          i++;\n        }\n      }\n\n      steps.push({\n        action: AlgorithmAction.SwapAndSetSorted,\n        operands: {\n          left: {\n            index: i,\n            sorted: true,\n          },\n          right: {\n            index: hi,\n            sorted: false,\n          },\n        },\n      });\n\n      const tmp = arr[i];\n      arr[i] = arr[hi];\n      arr[hi] = tmp;\n\n      return i;\n    };\n\n    quicksort(0, arr.length - 1);\n\n    steps.push({\n      action: AlgorithmAction.Finish,\n    });\n\n    return steps;\n  }\n}\n\nexport default QuickSort;\n","import {\n  AlgorithmAction,\n  AlgorithmStep,\n  SortingAlgorithmDisplayName,\n} from \"../types\";\nimport SortingAlgorithmAbstract from \"./SortingAlgorithm\";\n\nclass SelectionSort extends SortingAlgorithmAbstract {\n  public name = SortingAlgorithmDisplayName.Selection;\n\n  public sort() {\n    const arr = [...this.numberArray];\n    const steps: AlgorithmStep[] = [];\n\n    const n = arr.length;\n    for (let i = 0; i < n - 1; i++) {\n      let minIndex = i;\n      for (let j = i + 1; j < n; j++) {\n        // Compare.\n        steps.push({\n          action: AlgorithmAction.Compare,\n          operands: {\n            left: minIndex,\n            right: j,\n          },\n        });\n        if (arr[j] < arr[minIndex]) {\n          minIndex = j;\n        }\n      }\n\n      // Swap and set sorted.\n      steps.push({\n        action: AlgorithmAction.SwapAndSetSorted,\n        operands: {\n          left: {\n            index: i,\n            sorted: true,\n          },\n          right: {\n            index: minIndex,\n            sorted: false,\n          },\n        },\n      });\n\n      const tmp = arr[i];\n      arr[i] = arr[minIndex];\n      arr[minIndex] = tmp;\n    }\n\n    // Set the last element sorted.\n    steps.push({\n      action: AlgorithmAction.SetSorted,\n      operand: n - 1,\n    });\n    steps.push({\n      action: AlgorithmAction.Finish,\n    });\n\n    return steps;\n  }\n}\n\nexport default SelectionSort;\n","import { SortingAlgorithmClass, SortingAlgorithmDisplayName } from \"../types\";\nimport InsertionSort from \"./InsertionSort\";\nimport MergeSort from \"./MergeSort\";\nimport QuickSort from \"./QuickSort\";\nimport SelectionSort from \"./SelectionSort\";\n\nconst algorithms: {\n  displayName: SortingAlgorithmDisplayName;\n  algorithmClass: SortingAlgorithmClass;\n}[] = [\n  {\n    displayName: SortingAlgorithmDisplayName.Selection,\n    algorithmClass: SelectionSort,\n  },\n  {\n    displayName: SortingAlgorithmDisplayName.Merge,\n    algorithmClass: MergeSort,\n  },\n  {\n    displayName: SortingAlgorithmDisplayName.Insertion,\n    algorithmClass: InsertionSort,\n  },\n  {\n    displayName: SortingAlgorithmDisplayName.Quick,\n    algorithmClass: QuickSort,\n  },\n];\n\nexport default algorithms;\n","// Helper function for exhaustive type checking.\nconst assertNever = (value: never): never => {\n  throw new Error(\n    `Unhandled discriminated union member: ${JSON.stringify(value)}`\n  );\n};\n\nexport default assertNever;\n","import { AlgorithmAction, AlgorithmStep, BarState, StateColor } from \"../types\";\nimport assertNever from \"./assertNever\";\n\nexport const evaluateNextStep = (\n  mainBars: HTMLDivElement[],\n  ambientBars: HTMLDivElement[],\n  step: AlgorithmStep,\n  prevMainBars: React.MutableRefObject<BarState[][]>,\n  prevAmbientBars: React.MutableRefObject<BarState[][]>,\n  appendToPrevState: boolean\n): void => {\n  if (appendToPrevState) {\n    prevMainBars.current.push(\n      mainBars.map((bar) => ({\n        backgroundColor: bar.style.backgroundColor,\n        opacity: bar.style.opacity,\n        order: bar.style.order,\n      }))\n    );\n    prevAmbientBars.current.push(\n      ambientBars.map((bar) => ({\n        backgroundColor: bar.style.backgroundColor,\n        opacity: bar.style.opacity,\n        order: bar.style.order,\n      }))\n    );\n  }\n\n  switch (step.action) {\n    case AlgorithmAction.Compare: {\n      mainBars.forEach((bar) => {\n        const index = parseInt(bar.style.order);\n        bar.style.backgroundColor =\n          index === step.operands.left || index === step.operands.right\n            ? StateColor.Yellow\n            : bar.style.backgroundColor === StateColor.Green\n            ? StateColor.Green\n            : StateColor.Red;\n      });\n      break;\n    }\n    case AlgorithmAction.Swap: {\n      mainBars.forEach((bar) => {\n        bar.style.backgroundColor =\n          bar.style.backgroundColor === StateColor.Green\n            ? StateColor.Green\n            : StateColor.Red;\n        const index = parseInt(bar.style.order);\n        if (index === step.operands.left) {\n          bar.style.order = step.operands.right.toString();\n        } else if (index === step.operands.right) {\n          bar.style.order = step.operands.left.toString();\n        }\n      });\n      break;\n    }\n    case AlgorithmAction.SetSorted: {\n      mainBars.forEach((bar) => {\n        bar.style.backgroundColor =\n          bar.style.backgroundColor === StateColor.Green\n            ? StateColor.Green\n            : StateColor.Red;\n        const index = parseInt(bar.style.order);\n        if (index === step.operand) {\n          bar.style.backgroundColor = StateColor.Green;\n        }\n      });\n      break;\n    }\n    case AlgorithmAction.SwapAndSetSorted: {\n      mainBars.forEach((bar) => {\n        bar.style.backgroundColor =\n          bar.style.backgroundColor === StateColor.Green\n            ? StateColor.Green\n            : StateColor.Red;\n        const index = parseInt(bar.style.order);\n        if (index === step.operands.right.index) {\n          bar.style.order = step.operands.left.index.toString();\n          if (step.operands.left.sorted) {\n            bar.style.backgroundColor = StateColor.Green;\n          }\n        } else if (index === step.operands.left.index) {\n          bar.style.order = step.operands.right.index.toString();\n          if (step.operands.right.sorted) {\n            bar.style.backgroundColor = StateColor.Green;\n          }\n        }\n      });\n      break;\n    }\n    case AlgorithmAction.Finish: {\n      break;\n    }\n    case AlgorithmAction.MergeEnter: {\n      mainBars.forEach((bar) => {\n        const index = parseInt(bar.style.order);\n        if (index >= step.start && index < step.end) {\n          bar.style.opacity = \"0\";\n        }\n      });\n      ambientBars.forEach((bar) => {\n        const index = parseInt(bar.style.order);\n        bar.style.backgroundColor = StateColor.Red;\n        bar.style.opacity =\n          index >= step.start && index < step.end ? \"0.2\" : \"0\";\n      });\n      break;\n    }\n    case AlgorithmAction.MergeCompare: {\n      ambientBars.forEach((bar) => {\n        const index = parseInt(bar.style.order);\n        bar.style.backgroundColor =\n          index === step.operands.left || index === step.operands.right\n            ? StateColor.Yellow\n            : StateColor.Red;\n      });\n      break;\n    }\n    case AlgorithmAction.MergeSetSorted: {\n      let targetHeight: string;\n      ambientBars.forEach((bar) => {\n        bar.style.backgroundColor = StateColor.Red;\n        const index = parseInt(bar.style.order);\n        if (index === step.from) {\n          targetHeight = bar.style.height;\n        }\n      });\n      mainBars.forEach((bar) => {\n        const index = parseInt(bar.style.order);\n        if (bar.style.height === targetHeight) {\n          bar.style.order = step.to.toString();\n          bar.style.opacity = \"1\";\n          bar.style.backgroundColor = step.sorted\n            ? StateColor.Green\n            : StateColor.Red;\n        } else if (index === step.to) {\n          bar.style.order = (step.to + 1).toString();\n        }\n      });\n      break;\n    }\n    case AlgorithmAction.MergeExit: {\n      ambientBars.forEach((bar) => {\n        const index = parseInt(bar.style.order);\n        if (index >= step.start && index < step.end) {\n          bar.style.order = step.swapMap[index].toString();\n        }\n      });\n      break;\n    }\n    default:\n      assertNever(step);\n  }\n};\n\nexport const evaluatePrevStep = (\n  mainBars: HTMLDivElement[],\n  ambientBars: HTMLDivElement[],\n  prevMainBarsState: BarState[],\n  prevAmbientBarsState: BarState[]\n): void => {\n  mainBars.forEach((bar, i) => {\n    bar.style.backgroundColor = prevMainBarsState[i].backgroundColor;\n    bar.style.order = prevMainBarsState[i].order;\n    bar.style.opacity = prevMainBarsState[i].opacity;\n  });\n  ambientBars.forEach((bar, i) => {\n    bar.style.backgroundColor = prevAmbientBarsState[i].backgroundColor;\n    bar.style.order = prevAmbientBarsState[i].order;\n    bar.style.opacity = prevAmbientBarsState[i].opacity;\n  });\n};\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport SortingAlgorithm from \"../algorithms/SortingAlgorithm\";\nimport { AlgorithmAction, AlgorithmStep, BarState, UIBar } from \"../types\";\nimport { evaluateNextStep, evaluatePrevStep } from \"../utils/evaluateStep\";\n\nexport const useVisualizer = (\n  algorithm: SortingAlgorithm,\n  arrayLength: number\n) => {\n  const [isRunning, setIsRunning] = useState(false);\n  const [mainBars, setMainBars] = useState<UIBar[]>([]);\n  const [ambientBars, setAmbientBars] = useState<UIBar[]>([]);\n\n  const steps = useRef<AlgorithmStep[]>([]);\n  const stepIndex = useRef<number>(0);\n  const barsRef = useRef<any>(null);\n  const timeOuts = useRef<NodeJS.Timeout[]>([]);\n  const prevMainBars = useRef<Array<BarState[]>>([]);\n  const prevAmbientBars = useRef<Array<BarState[]>>([]);\n\n  const startVisualization = () => {\n    const delay =\n      steps.current.length > 0\n        ? Math.max(10, Math.min(300, 20000 / steps.current.length))\n        : null;\n    if (delay) {\n      for (let i = stepIndex.current; i < steps.current.length; i++) {\n        timeOuts.current.push(\n          setTimeout(() => {\n            evaluateNextStep(\n              barsRef.current.mainBars,\n              barsRef.current.ambientBars,\n              steps.current[stepIndex.current],\n              prevMainBars,\n              prevAmbientBars,\n              stepIndex.current === prevMainBars.current.length\n            );\n            if (\n              steps.current[stepIndex.current].action === AlgorithmAction.Finish\n            ) {\n              setIsRunning(false);\n            }\n            stepIndex.current += 1;\n          }, (i - stepIndex.current + 1) * delay)\n        );\n      }\n    }\n  };\n\n  const clearVisualization = () => {\n    timeOuts.current.forEach((timeout) => clearTimeout(timeout));\n  };\n\n  const reset = () => {\n    clearVisualization();\n    stepIndex.current = 0;\n    setIsRunning(false);\n    const initialBars = algorithm.getInitialState();\n    setMainBars(initialBars);\n    setAmbientBars(initialBars);\n  };\n\n  const stepForward = () => {\n    if (steps.current.length === 0) {\n      steps.current = algorithm.sort();\n    }\n    if (stepIndex.current < steps.current.length) {\n      clearVisualization();\n      setIsRunning(false);\n      evaluateNextStep(\n        barsRef.current.mainBars,\n        barsRef.current.ambientBars,\n        steps.current[stepIndex.current],\n        prevMainBars,\n        prevAmbientBars,\n        stepIndex.current === prevMainBars.current.length\n      );\n      stepIndex.current += 1;\n    }\n  };\n\n  const stepBackward = () => {\n    if (stepIndex.current > 0) {\n      clearVisualization();\n      setIsRunning(false);\n      evaluatePrevStep(\n        barsRef.current.mainBars,\n        barsRef.current.ambientBars,\n        prevMainBars.current[stepIndex.current - 1],\n        prevAmbientBars.current[stepIndex.current - 1]\n      );\n      stepIndex.current -= 1;\n    }\n  };\n\n  const togglePlay = () => {\n    if (isRunning) {\n      clearVisualization();\n      setIsRunning(false);\n    } else {\n      if (\n        steps.current.length > 0 &&\n        stepIndex.current >= steps.current.length\n      ) {\n        reset();\n      } else {\n        if (steps.current.length === 0) {\n          steps.current = algorithm.sort();\n        }\n        startVisualization();\n        setIsRunning(true);\n      }\n    }\n  };\n\n  const generateBars = useCallback(() => {\n    clearVisualization();\n    stepIndex.current = 0;\n    setIsRunning(false);\n    steps.current = [];\n    prevMainBars.current = [];\n    prevAmbientBars.current = [];\n    const initialBars = algorithm.generateArray(arrayLength);\n    setMainBars(initialBars);\n    setAmbientBars(initialBars);\n  }, [arrayLength, algorithm]);\n\n  useEffect(() => {\n    generateBars();\n  }, [generateBars]);\n\n  return {\n    isRunning,\n    mainBars,\n    ambientBars,\n    barsRef,\n    generateBars,\n    togglePlay,\n    reset,\n    stepForward,\n    stepBackward,\n  };\n};\n","import React from \"react\";\n\ninterface BarProps {\n  style: React.CSSProperties;\n}\n\nconst Bar = React.forwardRef<HTMLDivElement, BarProps>(({ style }, ref) => {\n  return <div style={style} ref={ref}></div>;\n});\n\nexport default Bar;\n","import React, { useEffect, useImperativeHandle, useRef } from \"react\";\nimport { MIN_VALUE } from \"../algorithms/SortingAlgorithm\";\nimport { UIBar } from \"../types\";\nimport Bar from \"./Bar\";\nimport \"./Bars.css\";\n\nconst HEIGHT = 500;\n\ninterface BarsProps {\n  mainBars: UIBar[];\n  ambientBars: UIBar[];\n}\n\nconst Bars = React.forwardRef<any, BarsProps>(\n  ({ mainBars, ambientBars }, ref) => {\n    const maxValue = MIN_VALUE + mainBars.length - 1;\n    const heightCoefficient = (HEIGHT - 26) / maxValue;\n    const margin = Math.max(-0.25 * mainBars.length + 12.5, 0.5);\n\n    const mainBarsRef = useRef<Array<HTMLDivElement | null>>([]);\n    const ambientBarsRef = useRef<Array<HTMLDivElement | null>>([]);\n\n    useEffect(() => {\n      mainBarsRef.current = mainBarsRef.current.splice(0, mainBars.length);\n      ambientBarsRef.current = ambientBarsRef.current.splice(\n        0,\n        ambientBars.length\n      );\n    }, [mainBars, ambientBars]);\n\n    useImperativeHandle(ref, () => ({\n      get mainBars() {\n        return mainBarsRef.current;\n      },\n      get ambientBars() {\n        return ambientBarsRef.current;\n      },\n    }));\n\n    return (\n      <div\n        className=\"bars-container\"\n        style={{\n          height: HEIGHT,\n        }}\n      >\n        <div className=\"main-bars\">\n          {mainBars.map((bar, i) => (\n            <Bar\n              key={bar.id}\n              style={{\n                backgroundColor: bar.backgroundColor,\n                height: bar.value * heightCoefficient,\n                flex: 1,\n                marginLeft: margin,\n                marginRight: margin,\n                zIndex: 1,\n                order: i,\n              }}\n              ref={(el) => (mainBarsRef.current[i] = el)}\n            />\n          ))}\n        </div>\n        <div className=\"ambient-bars\">\n          {ambientBars.map((bar, i) => (\n            <Bar\n              key={bar.id}\n              style={{\n                backgroundColor: bar.backgroundColor,\n                height: bar.value * heightCoefficient,\n                flex: 1,\n                marginLeft: margin,\n                marginRight: margin,\n                opacity: 0,\n                order: i,\n              }}\n              ref={(el) => (ambientBarsRef.current[i] = el)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default React.memo(Bars);\n","import \"./ColorInfo.css\";\nimport React from \"react\";\n\ninterface ColorInfoProps {}\n\nconst ColorInfo: React.FC<ColorInfoProps> = () => {\n  return (\n    <div className=\"color-info\">\n      <div>\n        <div className=\"box red\"></div> = Not sorted\n      </div>\n      <div>\n        <div className=\"box yellow\"></div> = Comparison\n      </div>\n      <div>\n        <div className=\"box green\"></div> = Sorted\n      </div>\n    </div>\n  );\n};\n\nexport default ColorInfo;\n","// import { Button, Slider } from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./ControlTab.css\";\nconst Button = require(\"@material-ui/core/Button\").default;\nconst Slider = require(\"@material-ui/core/Slider\").default;\nconst IconButton = require(\"@material-ui/core/IconButton\").default;\nconst PlayCircleFilledIcon = require(\"@material-ui/icons/PlayCircleFilled\")\n  .default;\nconst PauseCircleFilledIcon = require(\"@material-ui/icons/PauseCircleFilled\")\n  .default;\nconst SkipNextIcon = require(\"@material-ui/icons/SkipNext\").default;\nconst SkipPreviousIcon = require(\"@material-ui/icons/SkipPrevious\").default;\n\ninterface ControlTabProps {\n  isRunning: boolean;\n  arrayLength: number;\n  setArrayLength: (length: number) => void;\n  onClickReset: () => void;\n  onClickPlay: () => void;\n  onClickGenerateNew: () => void;\n  onClickStepForward: () => void;\n  onClickStepBackward: () => void;\n}\n\nconst ControlTab: React.FC<ControlTabProps> = ({\n  isRunning,\n  arrayLength,\n  setArrayLength,\n  onClickGenerateNew,\n  onClickPlay,\n  onClickReset,\n  onClickStepForward,\n  onClickStepBackward,\n}) => {\n  return (\n    <div className=\"control-tab-container\">\n      <div className=\"play-buttons\">\n        <IconButton onClick={onClickStepBackward}>\n          <SkipPreviousIcon />\n        </IconButton>\n        <IconButton className=\"play-button\" onClick={onClickPlay}>\n          {isRunning ? <PauseCircleFilledIcon /> : <PlayCircleFilledIcon />}\n        </IconButton>\n        <IconButton onClick={onClickStepForward}>\n          <SkipNextIcon />\n        </IconButton>\n      </div>\n      <div className=\"settings\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onClickGenerateNew}\n        >\n          Generate New\n        </Button>\n        <Button variant=\"contained\" onClick={onClickReset}>\n          Reset\n        </Button>\n        <div className=\"slider\">\n          <p>Adjust the number of bars</p>\n          <Slider\n            value={arrayLength}\n            onChange={(_: any, newValue: any) =>\n              setArrayLength(newValue as number)\n            }\n            step={1}\n            min={10}\n            max={100}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ControlTab;\n","import React, { useState } from \"react\";\nimport algorithms from \"../algorithms\";\nimport SortingAlgorithm from \"../algorithms/SortingAlgorithm\";\n// import { SortingAlgorithmName } from \"../types\";\nimport \"./Header.css\";\n\ninterface HeaderProps {\n  currentAlgorithmName: string;\n  setAlgorithm: (algorithm: SortingAlgorithm) => void;\n}\n\nconst Header: React.FC<HeaderProps> = ({\n  currentAlgorithmName,\n  setAlgorithm,\n}) => {\n  const [showDropdown, setShowDropdown] = useState(false);\n\n  return (\n    <div className=\"header\">\n      <h1>Sorting Algorithm Visualizer</h1>\n      <div className=\"algorithm-menu\">\n        <h2>Algorithm:</h2>\n        <div\n          className=\"dropdown\"\n          onClick={() => setShowDropdown(!showDropdown)}\n        >\n          <div className=\"dropdown-selected\">\n            {currentAlgorithmName}\n            <div className=\"dropdown-caret-container\">\n              <div className={`dropdown-caret ${showDropdown ? \"open\" : \"\"}`}>\n                ▼\n              </div>\n            </div>\n          </div>\n          <ul className={`dropdown-menu ${showDropdown ? \"open\" : \"\"}`}>\n            {algorithms.map((a) => (\n              <li\n                key={a.displayName}\n                onClick={() => {\n                  setAlgorithm(new a.algorithmClass());\n                  setShowDropdown(false);\n                }}\n              >\n                {a.displayName}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport algorithms from \"../algorithms\";\nimport SortingAlgorithm from \"../algorithms/SortingAlgorithm\";\nimport { useVisualizer } from \"../hooks/useVisualizer\";\nimport \"./App.css\";\nimport Bars from \"./Bars\";\nimport ColorInfo from \"./ColorInfo\";\nimport ControlTab from \"./ControlTab\";\nimport Header from \"./Header\";\n\ninterface AppProps {}\n\nconst App: React.FC<AppProps> = () => {\n  const [algorithm, setAlgorithm] = useState<SortingAlgorithm>(\n    () => new algorithms[0].algorithmClass()\n  );\n  const [arrayLength, setArrayLength] = useState(10);\n  const {\n    isRunning,\n    mainBars,\n    ambientBars,\n    barsRef,\n    generateBars,\n    togglePlay,\n    reset,\n    stepForward,\n    stepBackward,\n  } = useVisualizer(algorithm, arrayLength);\n\n  return (\n    <div className=\"app-container\">\n      <Header\n        currentAlgorithmName={algorithm.name}\n        setAlgorithm={setAlgorithm}\n      />\n      <Bars mainBars={mainBars} ambientBars={ambientBars} ref={barsRef} />\n      <ControlTab\n        isRunning={isRunning}\n        arrayLength={arrayLength}\n        setArrayLength={setArrayLength}\n        onClickGenerateNew={generateBars}\n        onClickPlay={togglePlay}\n        onClickReset={reset}\n        onClickStepForward={stepForward}\n        onClickStepBackward={stepBackward}\n      />\n      <ColorInfo />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}